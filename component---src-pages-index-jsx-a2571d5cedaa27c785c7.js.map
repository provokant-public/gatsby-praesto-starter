{"version":3,"sources":["webpack:///./src/components/PostListItem/PostListItem.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["PostListItem","props","wrapper","React","createRef","link","scrollIntoView","bind","e","this","current","getBoundingClientRect","top","preventDefault","setTimeout","click","render","path","title","bgColor","teaser","excerpt","image","key","slug","className","ref","id","to","style","color","onClick","type","Image","src","Component","defaultProps","PostListing","postList","map","post","i","isOdd","postEdges","fields","frontmatter","Index","data","nodes","allMarkdownRemark","file","childImageSharp","gatsbyImageData","backgroundColor","backgroundImageSrc","images","fallback","isLandingPage","siteTitle","backgroundImage","dangerouslySetInnerHTML","__html","landingPageTitle","landingPageTeaser","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","postURL","postNode","postPath","postSEO","postMeta","config","siteLogo","urljoin","siteUrl","pathPrefix","siteDescription","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","lang","siteLanguage","content","JSON","stringify","property","undefined"],"mappings":"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","file":"component---src-pages-index-jsx-a2571d5cedaa27c785c7.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport './PostListItem.scss'\nimport Image from '../Image/Image'\n\nclass PostListItem extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.wrapper = React.createRef()\n    this.link = React.createRef()\n    this.scrollIntoView = this.scrollIntoView.bind(this)\n  }\n\n  scrollIntoView(e) {\n    if(this.wrapper.current.getBoundingClientRect().top !== 0) {\n      e.preventDefault()\n      this.wrapper.current.scrollIntoView()\n      setTimeout(() => {\n        this.link.current.click()\n      }, 160)\n    }\n  }\n\n  render() {\n    const { path, title, bgColor, teaser, excerpt, image, key } = this.props\n    const slug = kebabCase(title)\n\n    return (\n      <section className=\"item\" key={key} ref={this.wrapper} id={slug}>\n        <Link to={path} ref={this.link} style={{ color: bgColor || `#000`}} className=\"container\" onClick={e => this.scrollIntoView(e)}>\n          <div className=\"content\">\n            <h2>{title}</h2>\n            {teaser && <div className=\"teaser\">{teaser}</div>}\n            <p className=\"excerpt\">{excerpt}</p>\n            <button type=\"button\">Read more &raquo;</button>\n          </div>\n          <div className=\"image\">\n            {image && <Image src={image} />}\n          </div>\n        </Link>\n      </section>\n    )\n  }\n}\n\nPostListItem.propTypes = {\n  bgColor: PropTypes.string,\n  excerpt: PropTypes.string.isRequired,\n  image: PropTypes.string,\n  path: PropTypes.string.isRequired,\n  key: PropTypes.string.isRequired,\n  teaser: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nPostListItem.defaultProps = {\n  bgColor: ``,\n  image: ``,\n  teaser: ``,\n}\n\nexport default PostListItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PostListItem from '../PostListItem/PostListItem' \n\nclass PostListing extends React.Component {\n  get postList() {\n    const { postEdges } = this.props\n\n    return postEdges.map(({\n      fields: { slug: path },\n      frontmatter: { image, title, bgColor, teaser },\n      excerpt\n    }) => ({ path, excerpt, image, title, teaser, bgColor }))\n  }\n\n  render() {\n    return (\n      <>\n        {this.postList.map((post, i) => (\n          <PostListItem {...post} isOdd={i % 2 !== 0} key={post.slug} />\n        ))}\n      </>\n    )\n  }\n}\n\nPostListing.propTypes = {\n  postEdges: PropTypes.arrayOf(\n    PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        teaser: PropTypes.string,\n      }).isRequired,\n      fields: PropTypes.shape({\n        slug: PropTypes.string.isRequired,\n      }).isRequired,\n      excerpt: PropTypes.string.isRequired\n    })\n  ).isRequired,\n}\n\nexport default PostListing\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport Layout from '../layout/index'\nimport PostListing from '../components/PostListing/PostListing'\nimport SEO from '../components/SEO/SEO'\nimport { landingPageTeaser, landingPageTitle, siteTitle } from '../../data/SiteConfig'\n\nclass Index extends React.Component {\n  render() {\n    const { data } = this.props\n    const { nodes } = data.allMarkdownRemark\n    const { backgroundColor, images } = data.file.childImageSharp.gatsbyImageData\n    const { src: backgroundImageSrc } = images.fallback\n\n    return (\n      <Layout isLandingPage>\n        <Helmet title={siteTitle} />\n        <SEO />\n        <section\n          className=\"index\"\n          style={{\n            backgroundImage: `url(${backgroundImageSrc})`,\n            backgroundColor\n          }}\n        >\n          <div className=\"container\">\n            <div className=\"outer\">\n              <div className=\"inner\">\n                <h1 dangerouslySetInnerHTML={{ __html: landingPageTitle }} />\n                <p dangerouslySetInnerHTML={{ __html: landingPageTeaser }} />\n              </div>\n            </div>\n          </div>\n        </section>\n        <PostListing postEdges={nodes} />\n      </Layout>\n    )\n  }\n}\n\nexport default Index\n\nIndex.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      nodes: PropTypes.array.isRequired\n    }).isRequired,\n    file: PropTypes.shape({\n      childImageSharp: PropTypes.shape({\n        gatsbyImageData: PropTypes.shape({\n          images: PropTypes.shape({\n            fallback: PropTypes.shape({\n              src: PropTypes.string.isRequired\n            })\n          }),\n          backgroundColor: PropTypes.string.isRequired\n        })\n      })\n    }).isRequired\n  }).isRequired\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___sort], order: ASC }\n      filter: {\n        fields: { onLandingPage: { eq: true }, isActive: { eq: true } }\n      }\n    ) {\n      nodes {\n        excerpt(pruneLength: 300)\n        frontmatter {\n          title\n          bgColor\n          image\n          teaser\n        }\n        fields {\n          slug\n          sort\n          hasChildren\n        }\n      }\n    }\n    file(relativePath: {eq: \"images/content/spiral.jpg\"}) {\n      childImageSharp {\n        gatsbyImageData\n      }\n    }\n  }\n`\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport PropTypes from 'prop-types'\nimport config from '../../../data/SiteConfig'\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title ? postMeta.title : config.siteTitle\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt\n      image = postMeta.image ? postMeta.image : config.siteLogo\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <html lang={config.siteLanguage} />\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n\nSEO.propTypes = {\n  postNode: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      description: PropTypes.string,\n      title: PropTypes.string,\n      image: PropTypes.string,\n    }).isRequired,\n    excerpt: PropTypes.string.isRequired\n  }),\n  postPath: PropTypes.string,\n  postSEO: PropTypes.bool\n}\n\nSEO.defaultProps = {\n  postNode: undefined,\n  postPath: ``,\n  postSEO: false\n}\n\nexport default SEO\n"],"sourceRoot":""}